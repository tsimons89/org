#+OPTIONS: ^:nil
#+STARTUP: indent
#+STARTUP: hidestars
#+STARTUP: showstars

* Notes on hardware design for Eco Features
** Testing harness
I need a way to make sure that my design is working
*** DONE Explore Agile SoC
SCHEDULED: <2017-07-06 Thu 8:30-10:00>
*** DONE Hello world with TDD for verilog [3/3]
SCHEDULED: <2017-07-07 Fri 11:00-14:00>
- [X] Get simulator
  - Can I get one of these:
    - Mentor Graphics Questa
    - Cadence Incisive
    - Synopsys VCS
    - Aldec Riviera PRO
  - I ended up using Cadence on a CAEDM spice machine
- [X] Set up simple sv unit test on desktop
- [X] Make test more meaningful
** Eco prediction block
*** Overview
This block will be loaded with training data. A driver will stream pixel values from an image and the block will make a correct prediction.
#+TBLNAME:System I/O
| Type | Name | Description  |
|------+------+--------------|
| in   | clk  | system clock |
| in   | rst  | reset        |
#+TBLNAME:Full block Function I/O
| Type | Name              | Description                        |
|------+-------------------+------------------------------------|
| in   | px_data           | incoming pixel value               |
| in   | px_valid          | valid strobe, synchronous with clk |
| in   | frame_start       | idicates first pixel of frame      |
| out  | prediction        | the classification value           |
| out  | prediction_valid  | prediction valid signal            |
*** Eco feature block
**** Overview
Produce every possible creature. The output will be an array of structs that carry the pixel value and counter.
#+TBLNAME:Eco Feature Function I/O
| Type                   | Name                    | Description                        |
|------------------------+-------------------------+------------------------------------|
| in                     | px_data                 | incoming pixel value               |
| in                     | px_valid                | valid strobe, synchronous with clk |
| in                     | frame_start             | idicates first pixel of frame      |
| Array of out struct    | Every possible creature | Pixel value with pixel count       |
- What to do about the outputs that are not ready?
  Send all ones as counter.
*** Random Forest
**** Tree Design
     Because the hardware will be fixed, I will build the trees with the maximum number of nodes.
     There will be no leaves that terminate a branch before the maximum depth.
***** BRAM storage
      I could either store the nodes in some standard order based on their position in the tree, or I could store them in the order that they will be produced by the eco feature which is sorted by variable number
***** Resources Needed
      #+TBLNAME:Estimated Bits for Node
      | Data  | Range     | Bits |
      |-------+-----------+------|
      | Var   | 0 - 10,00 |   14 |
      | Value | 22 +/-    |   21 |
      | Id    | 0 - 30    |    6 |
      |-------+-----------+------|
      | Total |           |   41 |
      #+TBLFM: $3=vsum(@2..@-1)

      My Kintex has 445 BRAMs with 36Kb each. I could probably just have every tree fit into a BRAM.
*** Schedule
**** TODO Build eco hardware[1/5]
DEADLINE: <2017-08-05 Sat>
***** DONE Set function i/o
SCHEDULED: <2017-07-10 Mon 09:00-09:20>
***** TODO Build eco feature block[1/2]
DEADLINE: <2017-07-15 Sat>
****** DONE Set feature inputs and outputs
SCHEDULED: <2017-07-10 Mon 09:20-09:30>
****** TODO TDD on feature block[0/2]
DEADLINE: <2017-07-14 Fri>
******* TODO Feature interface tests
SCHEDULED: <2017-07-10 Mon 09:30-14:00>
******* TODO Feature pixel value test
***** TODO Set loading i/o
***** TODO Build random forest block[0/2]
DEADLINE: <2017-07-28 Fri>
****** TODO Build loading mechanism 
****** TODO Build forest function
***** TODO Integrate final design
DEADLINE: <2017-08-05 Sat>

